{"version":3,"file":"js/main.chunk.js","sources":["/home/jim/development/ar2/src/popup/src/App.css","/home/jim/development/ar2/src/popup/src/index.css","webpack:///./src/App.css?4433","/home/jim/development/ar2/src/popup/src/App.tsx","/home/jim/development/ar2/src/popup/src/components/browserpage.tsx","/home/jim/development/ar2/src/popup/src/components/pages.tsx","/home/jim/development/ar2/src/popup/src/components/pdfs.tsx","/home/jim/development/ar2/src/popup/src/components/popup.tsx","/home/jim/development/ar2/src/popup/src/components/transfers.tsx","/home/jim/development/ar2/src/popup/src/components/wallets.tsx","webpack:///./src/index.css?f3f6","/home/jim/development/ar2/src/popup/src/index.tsx","/home/jim/development/ar2/src/popup/src/providers/arweaveCrypto.ts","/home/jim/development/ar2/src/popup/src/providers/browser.ts","/home/jim/development/ar2/src/popup/src/providers/inline.js","/home/jim/development/ar2/src/popup/src/providers/wallets.ts","/home/jim/development/ar2/src/popup/src/serviceWorker.ts"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".App {\\n  text-align: center;\\n}\\n\\n.App-logo {\\n  height: 40vmin;\\n  pointer-events: none;\\n}\\n\\n@media (prefers-reduced-motion: no-preference) {\\n  .App-logo {\\n    animation: App-logo-spin infinite 20s linear;\\n  }\\n}\\n\\n.App-header {\\n  background-color: #282c34;\\n  min-height: 100vh;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: calc(10px + 2vmin);\\n  color: white;\\n}\\n\\n.App-link {\\n  color: #61dafb;\\n}\\n\\n@keyframes App-logo-spin {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { useState } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport BrowserPage from './components/browserpage'\nimport Popup from './components/popup'\n\nconst App = () => {\n\n  return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" render={() =>\n           //@ts-ignore\n            <Popup />} />\n          <Route path=\"/mainpage\" render={(routeProps) =>\n            <BrowserPage route=\"pages\" />} />\n        </Switch>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link as ReactLink } from 'react-router-dom';\nimport { ThemeProvider, Flex, Box, ButtonGroup, Button, Text, Link } from \"@chakra-ui/core\";\nimport { FaRegFileAlt, FaMoneyCheckAlt, FaWallet, FaFilePdf } from 'react-icons/fa'\nimport Wallets from './wallets'\nimport Pages from './pages'\nimport Pdfs from './pdfs'\nimport Transfers from './transfers'\n\nconst ArweaveLogo = () => {\n  return (<svg width=\"184\" height=\"32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M55.36 20.772a2.503 2.503 0 0 1-.174-.47 6.211 6.211 0 0 1-.122-.561c-.157.17-.337.33-.541.48-.205.15-.433.282-.684.398a3.961 3.961 0 0 1-.817.255 4.37 4.37 0 0 1-.97.103 4.791 4.791 0 0 1-1.563-.245 3.711 3.711 0 0 1-1.215-.685 3.13 3.13 0 0 1-.796-1.041 3.1 3.1 0 0 1-.286-1.328c0-1.164.432-2.062 1.297-2.695.871-.64 2.168-.96 3.89-.96h1.583v-.653c0-.531-.174-.95-.521-1.256-.347-.314-.848-.47-1.501-.47-.579 0-1 .126-1.266.378-.266.245-.398.575-.398.99h-2.839c0-.47.102-.915.306-1.338.211-.422.514-.792.909-1.112.402-.32.888-.572 1.46-.756.579-.19 1.24-.286 1.981-.286.667 0 1.287.082 1.858.245a4.465 4.465 0 0 1 1.501.725c.422.32.753.725.99 1.215.24.483.358 1.045.358 1.685v4.738c0 .592.038 1.082.113 1.47.074.388.183.722.326 1v.174h-2.88zm-2.706-1.99c.286 0 .551-.035.796-.103.245-.068.467-.156.664-.265.198-.11.368-.232.51-.368a2.06 2.06 0 0 0 .338-.429v-1.899h-1.45c-.443 0-.82.044-1.134.133-.313.081-.568.2-.766.357-.197.15-.343.334-.439.552a1.667 1.667 0 0 0-.142.694c0 .381.132.697.398.95.272.251.68.377 1.225.377zM68.95 9.52c.43 0 .824.03 1.185.092.367.054.664.116.888.184l-.418 2.828a9.058 9.058 0 0 0-1.154-.194 9.132 9.132 0 0 0-1.113-.071c-.797 0-1.436.153-1.92.46-.476.305-.834.744-1.072 1.316v6.637h-2.839V9.724h2.645l.133 1.807a5.014 5.014 0 0 1 1.613-1.47 4.04 4.04 0 0 1 2.052-.541zM80.642 17.31l.96-7.586h2.603l-1.98 11.048h-2.492l-1.45-7.025-1.399 7.025h-2.491L72.412 9.724h2.593l.96 7.617 1.389-7.617h1.9l1.388 7.587zM91.496 20.977c-.851 0-1.624-.14-2.318-.42a5.527 5.527 0 0 1-1.787-1.133 5.1 5.1 0 0 1-1.154-1.694 5.507 5.507 0 0 1-.398-2.094v-.408c0-.844.133-1.614.398-2.308a5.354 5.354 0 0 1 1.113-1.807 5.02 5.02 0 0 1 1.695-1.174 5.376 5.376 0 0 1 2.134-.419c.797 0 1.505.133 2.124.398a4.307 4.307 0 0 1 1.583 1.103c.436.476.766 1.052.99 1.726.225.667.337 1.405.337 2.215v1.205H88.72c.054.375.163.718.326 1.031.17.307.385.572.644.797.258.225.554.398.888.52.333.123.698.184 1.092.184.28 0 .555-.027.828-.081.279-.055.544-.133.796-.235.252-.109.487-.242.704-.398.218-.157.409-.34.572-.552l1.42 1.532c-.177.252-.409.5-.695.745-.279.239-.612.453-1 .644a6.53 6.53 0 0 1-1.277.449c-.47.116-.977.174-1.521.174zm-.337-9.16c-.32 0-.613.058-.878.174a2.06 2.06 0 0 0-.705.48 2.863 2.863 0 0 0-.5.755c-.136.293-.238.62-.306.98h4.656v-.224a2.684 2.684 0 0 0-.174-.847 1.939 1.939 0 0 0-.439-.684 1.947 1.947 0 0 0-.704-.46 2.413 2.413 0 0 0-.95-.174zM105.597 20.772a2.538 2.538 0 0 1-.174-.47 6.463 6.463 0 0 1-.122-.561c-.157.17-.337.33-.541.48-.205.15-.433.282-.684.398a3.99 3.99 0 0 1-.817.255c-.3.069-.623.103-.97.103a4.798 4.798 0 0 1-1.563-.245 3.716 3.716 0 0 1-1.215-.685 3.128 3.128 0 0 1-.796-1.041 3.1 3.1 0 0 1-.286-1.328c0-1.164.432-2.062 1.297-2.695.871-.64 2.168-.96 3.89-.96h1.583v-.653c0-.531-.174-.95-.521-1.256-.347-.314-.848-.47-1.501-.47-.579 0-1.001.126-1.266.378-.266.245-.398.575-.398.99h-2.839c0-.47.102-.915.306-1.338.211-.422.514-.792.91-1.112.401-.32.887-.572 1.459-.756.579-.19 1.239-.286 1.981-.286.667 0 1.287.082 1.859.245a4.465 4.465 0 0 1 1.5.725c.423.32.753.725.991 1.215.238.483.357 1.045.357 1.685v4.738c0 .592.038 1.082.113 1.47.075.388.183.722.326 1v.174h-2.879zm-2.706-1.99a2.974 2.974 0 0 0 1.46-.368 2.44 2.44 0 0 0 .511-.368 2.07 2.07 0 0 0 .337-.429v-1.899h-1.45c-.443 0-.82.044-1.134.133-.313.081-.568.2-.765.357-.198.15-.344.334-.439.552a1.656 1.656 0 0 0-.143.694c0 .381.132.697.398.95.272.251.681.377 1.225.377zM115.951 17.495l.143.796.143-.766 2.43-7.8h2.961l-4.197 11.047h-2.665l-4.217-11.048h2.961l2.441 7.77zM129.174 20.977c-.851 0-1.624-.14-2.318-.42a5.521 5.521 0 0 1-1.787-1.133 5.095 5.095 0 0 1-1.154-1.694 5.517 5.517 0 0 1-.398-2.094v-.408c0-.844.133-1.614.398-2.308a5.37 5.37 0 0 1 1.113-1.807 5.03 5.03 0 0 1 1.695-1.174 5.379 5.379 0 0 1 2.134-.419c.797 0 1.504.133 2.124.398a4.312 4.312 0 0 1 1.583 1.103c.435.476.765 1.052.99 1.726.225.667.337 1.405.337 2.215v1.205h-7.495c.055.375.164.718.327 1.031.17.307.385.572.643.797.259.225.555.398.889.52.333.123.697.184 1.092.184.279 0 .555-.027.827-.081a4.32 4.32 0 0 0 .797-.235 3.76 3.76 0 0 0 .704-.398c.218-.157.409-.34.572-.552l1.419 1.532c-.177.252-.408.5-.694.745a4.779 4.779 0 0 1-1.001.644 6.514 6.514 0 0 1-1.276.449c-.47.116-.977.174-1.521.174zm-.337-9.16c-.32 0-.613.058-.878.174a2.055 2.055 0 0 0-.705.48 2.87 2.87 0 0 0-.5.755c-.136.293-.239.62-.307.98h4.656v-.224a2.67 2.67 0 0 0-.173-.847 1.945 1.945 0 0 0-.439-.684 1.954 1.954 0 0 0-.705-.46 2.411 2.411 0 0 0-.949-.174z\" fill=\"#222326\" /><circle cx=\"16.376\" cy=\"15.992\" r=\"14.664\" stroke=\"#222326\" strokeWidth=\"2.5\" /><path d=\"M19.114 21.29a2.623 2.623 0 0 1-.182-.49 6.511 6.511 0 0 1-.128-.588 3.897 3.897 0 0 1-.566.502 4.097 4.097 0 0 1-.716.417 4.141 4.141 0 0 1-.854.267 4.574 4.574 0 0 1-1.015.107 5.01 5.01 0 0 1-1.634-.257 3.88 3.88 0 0 1-1.271-.716 3.274 3.274 0 0 1-.834-1.089c-.199-.427-.299-.89-.299-1.389 0-1.217.453-2.157 1.357-2.82.911-.669 2.268-1.004 4.07-1.004h1.655v-.683c0-.556-.181-.994-.545-1.314-.363-.328-.886-.491-1.57-.491-.605 0-1.047.131-1.324.395-.278.256-.417.602-.417 1.036h-2.97c0-.491.107-.958.321-1.4.22-.44.538-.829.95-1.163.42-.335.93-.599 1.528-.79.605-.2 1.296-.3 2.072-.3.698 0 1.346.085 1.944.256.606.171 1.129.424 1.57.759.442.334.787.758 1.037 1.27.249.506.373 1.094.373 1.763v4.956c0 .62.04 1.133.118 1.538.078.406.192.755.342 1.047v.182h-3.012zm-2.83-2.082c.298 0 .576-.036.832-.107.257-.071.488-.164.695-.278.206-.114.384-.242.534-.384.15-.15.267-.3.352-.449v-1.986H17.18c-.462 0-.858.046-1.185.138-.328.086-.595.21-.801.374a1.44 1.44 0 0 0-.46.577c-.1.22-.15.463-.15.726 0 .4.14.73.417.994.285.263.712.395 1.282.395z\" fill=\"#222326\" /></svg>)\n}\n\n\nconst BrowserPage = (route: any) => {\n  return (<Router basename=\"/mainpage\">\n    <ThemeProvider>\n      <Flex w=\"100%\" px={5} py={4} justifyContent=\"space-between\" alignItems=\"center\" borderBottom=\"1px\" borderBottomColor=\"gray.200\">\n        <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          <ArweaveLogo />\n        </Flex>\n        <ButtonGroup pr={5} >\n          {/* @ts-ignore*/}  {/* Just following the Chakra-ui docs!*/}\n          <Link as={ReactLink} to=\"/pdfs\"><Button leftIcon={FaFilePdf} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\">PDFs</Button></Link>\n          {/* @ts-ignore*/}\n          <Link as={ReactLink} to=\"/pages\"><Button leftIcon={FaRegFileAlt} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\">Pages</Button></Link>\n          {/*@ts-ignore*/}\n          <Link as={ReactLink} to=\"/transfers\"><Button leftIcon={FaMoneyCheckAlt} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\">Transfers</Button></Link>\n          {/*@ts-ignore*/}\n          <Link as={ReactLink} to=\"/wallets\"><Button leftIcon={FaWallet} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\">Wallets</Button></Link>\n        </ButtonGroup>\n      </Flex >\n      <Flex w=\"100%\" px={8} pt={4} justifyContent=\"space between\" alignItems=\"center\">\n        <Switch>\n          <Route path=\"/pages\">\n            <Pages />\n          </Route>\n          <Route path=\"/pdfs\">\n            <Pdfs />\n          </Route>\n          <Route path=\"/transfers\">\n            <Transfers />\n          </Route>\n          <Route path=\"/wallets\">\n            <Wallets />\n          </Route>\n        </Switch>\n      </Flex>\n    </ThemeProvider></Router>\n  )\n}\n\n\nexport default BrowserPage\n","import React, { Fragment, useState } from 'react';\nimport { HashRouter, Switch, Route, useHistory } from 'react-router-dom';\nimport {\n  Text, Flex, Button, Modal, SimpleGrid, Input,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/core\";\nimport axios from 'axios'\nimport inline from '../providers/inline'\nimport { getFee, archivePage } from '../providers/wallets'\nimport { useSelector } from 'react-redux'\nimport { initialStateType, wallet, page } from '../background'\ninterface inline {\n  title: string,\n  size: number,\n  html: any\n}\n\nvar pageSource: inline = { title: '', size: 0, html: undefined }\nvar fee: string = '0'\nconst PagePreview = (): any => {\n  const [source, setSource] = useState(null as any)\n\n  axios.get(window.location.hash.substr(17,).split('#')[0])\n    .then((res) => inline.html(res.data, window.location.hash.substr(17,).split('#')[0]))\n    .then((res) => { pageSource = res; setSource(res.html) })\n\n  getFee(pageSource.size).then((res) => fee = res)\n\n  return (<Flex direction=\"column\" width=\"100%\"><Text>Preview of {window.location.hash.substr(17,).split('#')[0]}</Text>\n    <iframe height=\"100%\" width=\"80%\" srcDoc={source ? source : undefined} ></iframe></Flex>)\n}\n\nconst Pages = () => {\n  const [isOpen, setOpen] = useState(false)\n  const state = useSelector((rootState: initialStateType) => rootState)\n  const [balance, setBalance] = useState(state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].balance)\n  const history = useHistory();\n  const [password, setPassword] = useState('')\n  const pageSaver = () => {\n    let pageDeets = {\n      'title': pageSource.title,\n      'url': window.location.hash.substr(17,).split('#')[0],\n      'fee': fee,\n      'status': 'pending',\n      'txnId': '',\n      'timestamp': '',\n      'html': pageSource.html\n    }\n    archivePage(pageDeets, password)\n  }\n\n  const PageTable = () => {\n    let pages = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].pages\n    console.log(pages)\n    return <Fragment><Flex direction=\"column\">\n      <SimpleGrid columns={4}>\n        <Text fontWeight=\"bold\" key=\"title\">Title</Text>\n        <Text fontWeight=\"bold\" key=\"url\">URL</Text>\n        <Text fontWeight=\"bold\" key=\"fee\">Fee</Text>\n        <Text fontWeight=\"bold\" key=\"timestamp\">Timestamp</Text>\n      </SimpleGrid>\n      {pages ? pages.map((page: page) => {\n        return (\n          <SimpleGrid columns={4} key={page.txnId + '1'} >\n            <Text key={page.title}>{page.title}</Text>\n            <Text key={page.url}>{page.url}</Text>\n            <Text key={page.fee}>{page.fee}</Text>\n            <Text key={page.timestamp}>{page.timestamp}</Text>\n          </SimpleGrid>\n        )\n      }) :\n        <span>You shouldn't be seeing this</span>}\n    </Flex></Fragment>\n  }\n\n  return (<HashRouter basename=\"/mainpage\">\n    <Switch>\n      <Route path=\"/pages\" exact={true}>\n        <PageTable />\n      </Route>\n      <Route path=\"/pages/\" exact={false}>\n        <Flex width=\"100%\" direction=\"column\">\n          <PagePreview />\n          <Button width=\"200px\" onClick={() => setOpen(true)}> Archive Page</Button>\n          <Modal isOpen={isOpen} onClose={() => setOpen(false)}>\n            <ModalOverlay />\n            <ModalContent>\n              <ModalHeader>Confirm Transaction</ModalHeader>\n              <ModalCloseButton />\n              <ModalBody>\n                <Text>From: {state.activeWallet}</Text>\n                <Text>Page Title: {pageSource.title}</Text>\n                <Text>Page URL: {window.location.hash.substr(17,).split('#')[0]}</Text>\n                <Text>Page Size: {pageSource.size}</Text>\n                <Text>Fee: {fee}</Text>\n                <Text>Balance after transaction: {parseFloat(typeof (balance) === 'string' ? balance : '0') - parseFloat(fee)}</Text>\n                <Input value={password} onChange={((evt:any) => setPassword(evt.target.value))} type=\"password\" />\n              </ModalBody>\n              <ModalFooter>\n                <Button onClick={function () {\n                  pageSaver();\n                  history.push('/pages')\n                }}>Archive Page</Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </Flex>\n      </Route>\n    </Switch>\n  </HashRouter>\n  )\n}\n\nexport default Pages\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { HashRouter, Switch, Route, useHistory } from 'react-router-dom';\nimport {\n  Text, Flex, Button, Modal, SimpleGrid, Input,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/core\";\nimport axios from 'axios'\n\nimport { getFee, archivePdf } from '../providers/wallets'\nimport { useSelector } from 'react-redux'\nimport { initialStateType, wallet, page } from '../background'\n\n\n\nconst Pdfs = () => {\n  const [isOpen, setOpen] = useState(false)\n  const state = useSelector((rootState: initialStateType) => rootState)\n  const [balance, setBalance] = useState(state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].balance)\n  const history = useHistory();\n  const [source, setSource] = useState(null as any)\n  const [fee,setFee] = useState('0')\n  const [size, setSize] = useState('0')\n  const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    console.log(window.location.hash.substr(16,))\n    axios({\n      url: window.location.hash.substr(16,).split('#')[0],\n      method: 'get',\n      responseType: 'blob',\n      headers: {\n        Accept: 'application/pdf',\n        'Content-Type': 'application/pdf',\n        mode: 'no-cors'\n      }\n    })\n      .then(response => {\n\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = ((file) => {\n          setSource(file!.target!.result)\n        })\n        setSize(response.data.size)\n        getFee(response.data.size).then((res) => {\n          setFee(res);\n          setOpen(true)})\n        reader.readAsArrayBuffer(response.data)\n      })\n  \n  },[])\n\n  const pdfSaver = () => {\n    let pdfDeets = {\n      'url': window.location.hash.substr(16,).split('#')[0],\n      'fee': fee,\n      'status': 'pending',\n      'txnId': '',\n      'timestamp': '',\n      'source': source\n    }\n    console.log(source)\n    archivePdf(pdfDeets, password)\n  }\n\n  const PdfTable = () => {\n    console.log(state)\n    let pdfs = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].pdfs\n    console.log(pdfs)\n    return <Fragment><Flex direction=\"column\">\n      <SimpleGrid columns={3}>\n        <Text fontWeight=\"bold\" key=\"url\">URL</Text>\n        <Text mx={5} fontWeight=\"bold\" key=\"fee\">Fee</Text>\n        <Text fontWeight=\"bold\" key=\"timestamp\">Timestamp</Text>\n      </SimpleGrid>\n      {pdfs ? pdfs.map((pdf: page) => {\n        return (\n          <SimpleGrid columns={3} key={pdf.txnId + '1'} >\n            <Text key={pdf.url}>{pdf.url}</Text>\n            <Text mx={5} key={pdf.fee}>{pdf.fee}</Text>\n            <Text key={pdf.timestamp}>{pdf.timestamp}</Text>\n          </SimpleGrid>\n        )\n      }) :\n        <span>You shouldn't be seeing this</span>}\n    </Flex></Fragment>\n  }\n\n  return (<HashRouter basename=\"/mainpage\">\n    <Switch>\n      <Route path=\"/pdfs\" exact={true}>\n        <PdfTable />\n      </Route>\n      <Route path=\"/pdfs/\" exact={false}>\n        <Flex width=\"100%\" direction=\"column\">\n          <Modal isOpen={isOpen} onClose={() => setOpen(false)}>\n            <ModalOverlay />\n            <ModalContent>\n              <ModalHeader>Confirm Transaction</ModalHeader>\n              <ModalCloseButton />\n              <ModalBody>\n                <Text>From: {state.activeWallet}</Text>\n                <Text>Page URL: {window.location.hash.substr(16,).split('#')[0]}</Text>\n                <Text>Page Size: {parseInt(size)/1000} kb</Text>\n                <Text>Fee: {fee}</Text>\n                <Text>Balance after transaction: {parseFloat(typeof (balance) === 'string' ? balance : '0') - parseFloat(fee)}</Text>\n                <Input value={password} onChange={((evt:any) => setPassword(evt.target.value))} type=\"password\" />\n              </ModalBody>\n              <ModalFooter>\n                <Button onClick={function () {\n                  pdfSaver();\n                  history.push('/pdfs')\n                }}>Confirm and Archive Pdf</Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </Flex>\n      </Route>\n    </Switch>\n  </HashRouter>\n  )\n}\n\nexport default Pdfs\n","import React, { useState } from 'react';\nimport { FaRegFileAlt, FaMoneyCheckAlt, FaWallet, FaFilePdf } from 'react-icons/fa'\nimport { ThemeProvider, Box, Text, Flex, IconButton, Button } from \"@chakra-ui/core\";\nimport { openTab } from '../providers/browser'\nimport { useSelector } from 'react-redux'\nimport { initialStateType } from '../background'\n\ntype pageType = {\n  type: string,\n  url: string\n}\n\nconst Popup = () => {\n  const state = useSelector((rootState: initialStateType) => rootState)\n  const [url, setUrl] = useState({} as pageType)\n  const [wallet, setWallet] = useState(state.activeWallet ? state.wallets.filter((wallet) => wallet.address === state.activeWallet)[0] : { address: '', nickname: '', balance: '' })\n\n  const urlChecker = (url: string) => {\n    if (url !== '') {\n      if (url.substring(url.length - 3,) === 'pdf') {\n        setUrl({ type: 'pdf', url: url })\n      }\n      else if ((url.split(':')[0] === 'http') || (url.split(':')[0] === 'https')) {\n        setUrl({ type: 'page', url: url })\n      }\n    }\n  }\n\n  chrome.tabs.query({ 'active': true, 'windowId': chrome.windows.WINDOW_ID_CURRENT }, (tabs =>\n    tabs[0].url ? urlChecker(tabs[0].url) : undefined))\n\n  return (\n    <ThemeProvider>\n      <div className=\"App\">\n        {state.activeWallet === '' ?\n          <Box w=\"400px\">\n            <Box onClick={() => openTab('wallets')}><Button leftIcon={FaWallet} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\">Load Wallet</Button></Box>\n          </Box>\n          :\n          <Box w=\"400px\">\n            <Text fontSize=\"4xl\">{wallet.balance} AR</Text>\n            <Text>{wallet.address} </Text>\n            <Text>{wallet.nickname}</Text>\n            {(url.type !== undefined) ? <Button onClick={() => openTab(url.type === 'page' ? 'pages/' + url.url : 'pdfs/' + url.url)}>Archive this {url.type}</Button>\n              :\n              <Text background=\"gray\" color=\"white\" fontSize=\"2xl\">Archiving this page not supported</Text>}\n\n            <Flex direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"space-between\" >\n              <Box onClick={() => openTab('pdfs')}><IconButton aria-label=\"PDFs\" icon={FaFilePdf} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\" /><Text>PDFs</Text></Box>\n              <Box onClick={() => openTab('pages')}><IconButton aria-label=\"pages\" icon={FaRegFileAlt} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\" /><Text>Pages</Text></Box>\n              <Box onClick={() => openTab('transfers')}><IconButton aria-label=\"transfers\" icon={FaMoneyCheckAlt} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\" /><Text>Transfers</Text></Box>\n              <Box onClick={() => openTab('wallets')}><IconButton aria-label=\"wallets\" icon={FaWallet} bg=\"white\" color=\"grey\" border=\"none\" size=\"lg\" /><Text>Wallets</Text></Box>\n            </Flex>\n          </Box>}\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default Popup\n","import React, { Fragment, useState } from 'react';\nimport {\n  Text, Flex, Button, Modal, SimpleGrid, Input,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/core\";\n\nimport { getFee, sendTransfer } from '../providers/wallets'\nimport { useSelector } from 'react-redux'\nimport { initialStateType, wallet } from '../background'\n\n\n\n\nconst Transfers = () => {\n  const [isOpen, setOpen] = useState(false)\n  const state = useSelector((rootState: initialStateType) => rootState)\n  const [balance, setBalance] = useState(state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].balance)\n  const [amount, setAmount] = useState('')\n  const [fee, setFee] = useState('0')\n  const [to, setToAddress] = useState('')\n  const [message, setMessage] = useState('')\n  const [password, setPassword] = useState('')\n\n\n  const updateFee = () => {\n    let messageSize = (message === '' ? 0 : new Blob([message]).size)\n    getFee(messageSize).then((cost) => { console.log('Fee is now ' + cost); setFee(cost) })\n  }\n\n  const initiateTransfer = async () => {\n    let transfterDeets = {\n      'to': to,\n      'fee': fee,\n      'status': 'pending',\n      'txnId': '',\n      'timestamp': '',\n      'amount': amount,\n      'message': message\n    }\n    console.log(amount)\n    sendTransfer(transfterDeets, password)\n  }\n\n  const TransfersTable = () => {\n    console.log(state)\n    let transfers = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].transfers\n    return (\n      <Fragment>\n        {transfers != null && <Flex direction=\"column\">\n          <SimpleGrid columns={4}>\n            <Text fontWeight=\"bold\" key=\"url\">Sendee Address</Text>\n            <Text mx={5} fontWeight=\"bold\" key=\"fee\">Fee</Text>\n            <Text fontWeight=\"bold\">Amount</Text>\n            <Text fontWeight=\"bold\" key=\"timestamp\">Timestamp</Text>\n          </SimpleGrid>\n          {transfers.map((transfer: any) => {\n            return (\n              <SimpleGrid columns={4} key={transfer.txnId + '1'} >\n                <Text key={transfer.to}>{transfer.to}</Text>\n                <Text mx={5} key={transfer.fee}>{transfer.fee} AR</Text>\n                <Text key={transfer.amount}>{transfer.amount} AR</Text>\n                <Text key={transfer.timestamp}>{transfer.timestamp}</Text>\n              </SimpleGrid>\n            )\n          })}\n        </Flex>}\n      </Fragment>)\n  }\n\n  return (\n    <Flex direction=\"column\">\n      <SimpleGrid columns={3} minWidth=\"90%\" bg=\"blue\">\n        <Text alignSelf=\"start\">Transfers</Text>\n        <Text alignSelf=\"end\">{balance} AR</Text>\n        <Button alignSelf=\"end\" onClick={() => setOpen(true)}>Send AR</Button>\n      </SimpleGrid>\n      <TransfersTable />\n      {isOpen && <Flex width=\"100%\" direction=\"column\">\n        <Modal isOpen={isOpen} onClose={() => setOpen(false)}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Send AR</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <Text>From: {state.activeWallet}</Text>\n              <Input placeholder=\"Send to Arweave wallet address\" value={to} onChange={(e: any) => setToAddress(e.target.value)} />\n              <Input placeholder=\"Amount\" value={amount} onChange={(e: any) => setAmount(e.target.value)} />\n              <Input placeholder=\"Message (optional)\" value={message} onChange={(evt: any) => setMessage(evt.target.value)} onBlur={updateFee}></Input>\n              <Text>Fee: {fee}</Text>\n              <Text>Balance after transaction: {parseFloat(typeof (balance) === 'string' ? balance : '0') - parseFloat(fee)}</Text>\n              <Input value={password} onChange={((evt:any) => setPassword(evt.target.value))} type=\"password\" />\n            </ModalBody>\n            <ModalFooter>\n              <Button onClick={function () {\n                initiateTransfer();\n                setOpen(false)\n              }}>Next</Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </Flex>}\n    </Flex>\n  )\n}\n\nexport default Transfers\n","import React, { useState, Fragment } from 'react';\nimport { Flex, Box, Button, Text, Input, SimpleGrid } from \"@chakra-ui/core\";\nimport { addWallet } from '../providers/wallets'\nimport Dropzone from 'react-dropzone'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { initialStateType } from '../background'\n\n\nconst Wallets = () => {\n\n  const state = useSelector((rootState : initialStateType) => rootState)\n  const dispatch = useDispatch()\n  const [wallet, updateWallet] = useState()\n  const [address, setAddress] = useState(state.activeWallet)\n  const [processing, setProcessing] = useState(false)\n  const [nickname, setNickname] = useState('')\n  const [password, setPassword] = useState('')\n  \n\n  \n  const onDrop = (acceptedFiles: any) => {\n    setProcessing(true);\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      if (acceptedFiles[0].type === \"application/json\") {\n        updateWallet(JSON.parse(event!.target!.result as string))\n      }\n      //Add error handling where invalid wallet\n    }\n    reader.readAsText(acceptedFiles[0])\n  }\n\n  const setWalletName = (evt: any) => setNickname(evt.target.value)\n  const updatePassword = (evt: any) => setPassword(evt.target.value)\n  const WalletHeader = () => {\n    return (\n      <Box>\n        <SimpleGrid columns={5} flexDirection=\"row\" alignContent=\"start\">\n          <Text fontWeight=\"bold\">Address</Text>\n          <Text fontWeight=\"bold\" mx={4}>Nickname</Text>\n          <Text fontWeight=\"bold\" >Balance</Text>\n        </SimpleGrid>\n        <WalletTable /></Box>\n    )\n  }\n\n  const WalletTable = () => {\n    return (<Fragment>{state.wallets.length > 0 ? state.wallets.map((wallet: any) => {\n      return (\n        <SimpleGrid columns={5} key={wallet.nickname + '1'} flexDirection=\"row\" alignContent=\"start\">\n          <Text key={wallet.address}>{wallet.address}</Text>\n          <Text mx={4} key={wallet.nickname}>{wallet.nickname}</Text>\n          <Text key={wallet.balance}>{wallet.balance} AR</Text>\n          <Button onClick={() => {\n            dispatch({ type: 'REMOVE_WALLET', payload: { address: wallet.address } })\n          }}>\n            Remove Wallet</Button>\n          <Button onClick={() => {\n            dispatch({ type: 'SET_ACTIVE', payload: { address: wallet.address } })\n          }}>Use Wallet</Button>\n        </SimpleGrid>)\n    }): <span>No wallets</span>}</Fragment>)\n  }\n\n  const loadWallet = async () => {\n    //TODO: Figure out why State isn't updating after background ADD_WALLET dispatch\n    let res = await addWallet(wallet, nickname, password);\n    setProcessing(false)\n  }\n\n  const WalletLoader = () => {\n\n    return (\n      <Box w=\"400px\" borderStyle='dashed' borderWidth=\"2px\">\n        <Dropzone onDrop={onDrop} accept=\"application/json\">\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </Box>\n    )\n  }\n\n  return (\n    <Flex direction=\"column\">\n      {state.activeWallet && !processing && <WalletHeader />}\n      {(!processing) && <WalletLoader />}\n      {(processing) &&\n        <Box w=\"400px\">\n          <Text>Enter a wallet nickname</Text>\n          <Input value={nickname} onChange={setWalletName} />\n          <Input value={password} onChange={updatePassword} type=\"password\" />\n          <Button onClick={loadWallet}>Load Wallet</Button>\n        </Box>}\n    </Flex>\n  )\n}\n\nexport default Wallets\n","\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { Store } from 'webext-redux'\n\nconst store = new Store();\n\nstore.ready().then(() => {\n  ReactDOM.render(\n    <Provider store={store}>\n  <React.StrictMode>\n      <App />\n    </React.StrictMode></Provider>,\n    document.getElementById('root')\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Arweave from \"arweave/web\";\n\nclass ArweaveCrypto{\n\n    public readonly driver: SubtleCrypto;\n    public crypto: Crypto\n    public config: any\n    constructor(){\n\n        this.driver = window.crypto.subtle;\n        \n        this.crypto = crypto;\n\n        this.config = {\n            keys: {\n                subtle: {\n                    name: 'RSA-PSS',\n                    modulusLength: 4096,\n                    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                    hash: {\n                        name: 'SHA-256',\n                    }\n                }\n            },\n            digests: {\n                hash: 'SHA-256'\n            },\n            signatures: {\n                hash: 'SHA-256',\n                subtle: {\n                    name: 'RSA-PSS',\n                    saltLength: 0,\n                }\n            }\n        };\n\n\n    }\n\n    /**\n     * Generate a new JWK private key.\n     * \n     * @return {Promise<Object>}\n     */\n    async jwk(){\n\n        let key = await this\n            .driver\n            .exportKey(\n                'jwk', \n                (await this.key())\n            );\n\n        return {\n            'kty': key.kty,\n            'e'  : key.e,\n            'n'  : key.n,\n            'd'  : key.d,\n            'p'  : key.p,\n            'q'  : key.q,\n            'dp' : key.dp,\n            'dq' : key.dq,\n            'qi' : key.qi,\n        };\n    }\n\n    /**\n     * Generate a hash digest of the given input data.\n     * \n     * @param {ArrayBuffer} data - The string to hash\n     * \n     * @return {Promise<string>} - Base64 URL encoded string will be returned\n     */\n    async hash(data: ArrayBuffer){\n        let digest = await this\n            .driver\n            .digest(\n                this.config.digests.hash,\n                data\n            );\n\n        return digest;\n    }\n\n    /**\n     * \n     * @param {Object} jwk - JWK object\n     * @param {ArrayBuffer} buffer - ArrayBuffer of contents to sign\n     * \n     * @return {Promise<ArrayBuffer>}\n     */\n    async sign(jwk: any, buffer: ArrayBuffer){\n        return this\n            .driver\n            .sign(\n                this.config.signatures.subtle,\n                (await this.jwkToCryptoKey(jwk)),\n                buffer\n            );\n    }\n\n    /**\n     * Generate a new CryptoKey private key using an Arweave\n     * compliant configuration.\n     * \n     * @return {Promise<CryptoKey>}\n     */\n    async key(){\n        let cryptokey = await this\n            .driver\n            .generateKey(\n                this.config.keys.subtle,\n                true,\n                ['sign']\n            );\n//@ts-ignore\n        return cryptokey.privateKey;\n    }\n\n    /**\n     * Convert a JWK object into a CryptoKey to use with subtle functions.\n     * \n     * @param {Object} jwk - JWK object\n     */\n    async jwkToCryptoKey(jwk: any){\n        return this.driver.importKey(\n            'jwk',\n            jwk,\n            this.config.keys.subtle,\n            false,\n            ['sign']\n        );\n    }\n\n    /**\n     * \n     * @param {ArrayBuffer} dataBuffer - ArrayBuffer of data to encrypt\n     * @param {ArrayBuffer} passphraseBuffer - ArrayBuffer to use as key to encrypt with\n     * \n     * @return {Promise<ArrayBuffer>} - Encrypted data\n     */\n    async encrypt(dataBuffer: ArrayBuffer, passphraseBuffer: ArrayBuffer){\n\n            let salt = Arweave.utils.b64UrlToBuffer('Memory hole.');\n\n            let iterations = 100000;\n            let hash = 'SHA-256';\n\n            let iv = new Uint8Array(16);\n\n            this.crypto.getRandomValues(iv);\n\n            let rawKey = await this.driver.importKey(\n                'raw',\n                passphraseBuffer,\n                {name: 'PBKDF2'},\n                false,\n                ['deriveKey']\n            );\n\n            let key = await this.driver.deriveKey(\n                {\n                    name: 'PBKDF2',\n                    salt: salt,\n                    iterations: iterations,\n                    hash: hash\n                },\n                rawKey,\n                {\n                    name: 'AES-CBC',\n                    length: 256\n                },\n                false,\n                ['encrypt', 'decrypt']\n            );\n\n            let encryptedData = await this.driver.encrypt(\n                {\n                    name: 'AES-CBC',\n                    iv: iv\n                },\n                key,\n                dataBuffer\n            );\n\n            return Arweave.utils.concatBuffers([iv, encryptedData]);\n\n    }\n\n    /**\n     * @param {ArrayBuffer} encryptedBuffer - ArrayBuffer of data to decrypt\n     * @param {ArrayBuffer} passphraseBuffer - ArrayBuffer to use as key to decrypt with\n     * \n     * @return {Promise<ArrayBuffer>} - Decrypted data\n     */\n    async decrypt(encryptedBuffer: ArrayBuffer, passphraseBuffer:ArrayBuffer){\n        let salt = Arweave.utils.b64UrlToBuffer('Memory hole.');\n        let iter = 100000;\n        let hash = 'SHA-256';\n        let iv = encryptedBuffer.slice(0, 16);\n        let dataBuffer = encryptedBuffer.slice(16);\n\n        let rawKey = await this.driver.importKey(\n            'raw',\n            passphraseBuffer,\n            {name: 'PBKDF2'},\n            false,\n            ['deriveKey']\n        );\n\n        let key = await this.driver.deriveKey(\n            {\n                name: 'PBKDF2',\n                salt: salt,\n                iterations: iter,\n                hash: hash\n            },\n            rawKey,\n            {\n                name: 'AES-CBC',\n                length: 256\n            },\n            false,\n            ['encrypt', 'decrypt']\n        );\n\n        let data = this.driver.decrypt(\n            {\n                name:\n                'AES-CBC',\n                iv: iv\n            },\n            key,\n            dataBuffer\n        );\n\n        return data;\n    }\n}\n\nexport default ArweaveCrypto;","import axios from 'axios'\nexport const openTab = async (page: string) => {\n  let url = window.location.hash.substr(17,);\n  let source = (await axios.get(url)).data\n  localStorage.setItem('pageSource', source)\n  console.log(source)\n  chrome.tabs.create({ url: chrome.extension.getURL('popup/index.html#mainpage/' + page) })\n}\n","import axios from 'axios';\nimport arweave from 'arweave/web';\n\nexport default {\n\n  async html(htmlString, url, features = { embed: true }) {\n\n    let parser = new DOMParser();\n\n    let document = parser.parseFromString(htmlString, 'text/html');\n\n\n    let styleSheets = document.querySelectorAll('link[rel=\"stylesheet\"],link[rel=\"preload\"][as=\"style\"]');\n    let scripts = document.querySelectorAll('script,noscript');\n    let images = document.querySelectorAll('img');\n    let iframes = document.querySelectorAll('iframe');\n\n    let rebase = document.createElement('base');\n\n    rebase.setAttribute('href', url);\n\n    document.head.appendChild(rebase);\n\n\n    let promises = [];\n\n    let replacements = {\n\n    };\n\n    let encodedImages = {\n\n    };\n\n    styleSheets.forEach(styleSheet => {\n\n      let href = styleSheet.getAttribute('href');\n\n      let absoluteURL = new URL(href, url);\n\n      promises.push(new Promise((resolve) => {\n\n\n        axios\n          .create()\n          .get(absoluteURL)\n          .then(response => {\n\n            replacements[href] = response.data;\n            resolve(response.data);\n          })\n          .catch(err => {\n            resolve();\n          });\n      }));\n    });\n\n\n    images.forEach(image => {\n\n      if (features.embed == true) {\n        image.removeAttribute('sizes');\n        image.removeAttribute('srcset');\n        image.removeAttribute('data-src');\n      }\n\n      let src = image.getAttribute('src');\n      let absoluteURL = new URL(src, url);\n\n      if (features.embed == false) {\n        image.setAttribute('src', absoluteURL);\n        return;\n      }\n\n      promises.push(new Promise((resolve) => {\n\n        axios\n          .create()\n          .get(absoluteURL, {\n            responseType: 'blob',\n            timeout: 10000\n          })\n          .then(response => {\n\n\n            var reader = new FileReader();\n            reader.readAsDataURL(response.data);\n            reader.onload = function () {\n\n              encodedImages[src] = reader.result;\n\n              resolve();\n            }\n          })\n          .catch(err => {\n            resolve();\n          });\n      }));\n    });\n\n    await Promise.all(promises);\n\n\n\n    scripts.forEach(script => {\n      script.remove();\n    });\n\n    iframes.forEach(iframe => {\n      iframe.remove();\n    });\n\n    styleSheets.forEach(styleSheet => {\n\n      let href = styleSheet.getAttribute('href');\n\n      let styleTag = document.createElement('style');\n\n      styleTag.textContent = replacements[href];\n\n      styleSheet.replaceWith(styleTag);\n    });\n\n    if (features.embed == true) {\n\n      images.forEach(image => {\n        let src = image.getAttribute('src');\n\n        let replace = encodedImages[src];\n\n        if (typeof replace != 'string') {\n          return;\n        }\n\n        image.setAttribute('src', replace);\n      });\n    }\n\n    let html = this.documentToString(document);\n\n    return {\n      title: document.title,\n      html: html,\n      size: arweave.utils.b64UrlEncode(arweave.utils.bufferTob64(arweave.utils.stringToBuffer(html))).length\n    };\n\n  },\n  documentToString(domDocument) {\n    return domDocument.all[0].outerHTML;\n  },\n};\n","import Arweave from 'arweave/web'\nimport axios from 'axios'\nimport { Store } from 'webext-redux'\nimport { initialStateType, wallet, page, pdf } from '../background'\nimport ArweaveCrypto from './arweaveCrypto'\n\n\nconst arweave = Arweave.init({\n  //TODO: Import node address from settings\n  host: 'arweave.net',\n  port: 443,\n  protocol: 'https',\n})\n\nconst store = new Store()\nconst cryptor = new ArweaveCrypto();\n\nexport const addWallet = async (key: any, nickname: string, password: string): Promise<any> => {\n  let address = await arweave.wallets.jwkToAddress(key)\n  let encryptedKey = Arweave.utils.bufferToString(await cryptor.encrypt(Arweave.utils.stringToBuffer(JSON.stringify(key)), Arweave.utils.stringToBuffer(password)))\n  let balance = await arweave.wallets.getBalance(address)\n  await store.ready()\n  let result = await store.dispatch({ \n    type: 'ADD_WALLET', \n    payload: { \n      key: encryptedKey, \n      address: address, \n      nickname: nickname, \n      balance: arweave.ar.winstonToAr(balance) \n    } \n  })\n  return result\n}\n\n\nexport const getFee = async (size: number): Promise<string> => {\n  //TODO: Change out URL for node from settings\n  let res = await axios.get(`https://arweave.net/price/${size}`)\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const archivePage = async (page: any, password: string) => {\n  await store.ready()\n  let state = store.getState() as initialStateType\n  let encryptedKey = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].key\n  console.log((encryptedKey))\n  let rawKey = await cryptor.decrypt(Arweave.utils.stringToBuffer(encryptedKey), Arweave.utils.stringToBuffer(password))\n\n  let key = arweave.utils.bufferToString(rawKey)\n  console.log(JSON.parse(key))\n  let transaction = await arweave.createTransaction({ data: page.html }, key);\n  console.log(transaction)\n  transaction.addTag('Content-Type', 'text/html')\n  transaction.addTag('App-Name', 'Arweave Web Wallet v2.0')\n  await arweave.transactions.sign(transaction, key);\n  let pageDetails:page = { \n    'title': page.title, \n    'url': page.url, \n    'fee': page.fee,\n    'txnId': transaction.id,\n    'status': 'pending',\n    'timestamp': Date.now().toString()\n  }\n\n  await store.ready()\n  let result = await store.dispatch({ \n    type: 'ARCHIVE_PAGE', \n    payload: pageDetails\n  })\n  /*const response = await arweave.transactions.post(transaction);\n  console.log(response.status);\n  if (response.status === 200) {\n    localStorage.setItem('transaction', JSON.stringify({ 'title': page.title, 'fee': transaction.reward }))\n  }*/\n}\n\nexport const archivePdf = async (pdf: pdf, password: string) => {\n  await store.ready()\n  let state = store.getState() as initialStateType\n  let encryptedKey = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].key\n  let key = JSON.parse(arweave.utils.bufferToString(await arweave.crypto.decrypt(encryptedKey, password)))\n  let transaction = await arweave.createTransaction({ data: pdf.source }, key);\n  console.log(transaction)\n  console.log(pdf)\n  transaction.addTag('Content-Type', 'application/pdf')\n  transaction.addTag('App-Name', 'Arweave Web Wallet v2.0')\n  await arweave.transactions.sign(transaction, key);\n  let pdfDetails:any = { \n    'url': pdf.url, \n    'fee': pdf.fee,\n    'txnId': transaction.id,\n    'status': 'pending',\n    'timestamp': Date.now().toString()\n  }\n\n  let result = await store.dispatch({ \n    type: 'ARCHIVE_PDF', \n    payload: pdfDetails\n  })\n//  const response = await arweave.transactions.post(transaction);\n // console.log(response.status); \n}\n\nexport const sendTransfer = async (transfer: any, password: string) => {\n  await store.ready()\n  let state = store.getState() as initialStateType\n  let encryptedKey = state.wallets.filter((wallet: wallet) => wallet.address === state.activeWallet)[0].key\n  let key = JSON.parse(arweave.utils.bufferToString(await arweave.crypto.decrypt(encryptedKey, password)))\n  let transaction = await arweave.createTransaction({ \n    target: transfer.to, \n    data: transfer.message !== '' ? Buffer.from(transfer.message) : undefined,\n    quantity: arweave.ar.arToWinston(transfer.amount)\n   }, key);\n\n  transaction.addTag('App-Name', 'Arweave Web Wallet v2.0')\n  await arweave.transactions.sign(transaction, key);\n\n  let transferDetails: any = {\n    'to': transfer.to,\n    'amount': transfer.amount,\n    'message': transfer.message,\n    'fee': transfer.fee,\n    'txnId': transaction.id,\n    'status': 'pending',\n    'timestamp': Date.now().toString()\n  }\n\n  let result = await store.dispatch({ \n    type: 'INITIATE_TRANSFER', \n    payload: transferDetails\n  })\n\n  //  const response = await arweave.transactions.post(transaction);\n // console.log(response.status); \n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACrrDA;AACA;AACA;AASA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AASA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAYA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AAUA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AADA;AAUA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAdA;AAwBA;AAEA;;;;;;;AAKA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;;;;;;;;;AAOA;AACA;AAOA;AACA;AAEA;;;;;;;;;AAOA;AACA;AAOA;AAEA;;;;;;;;AAMA;AACA;AACA;AAOA;AACA;AAEA;;;;;;;AAKA;AACA;AAOA;AAEA;;;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAQA;AAEA;AACA;AAFA;AAQA;AAEA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAQA;AAEA;AAEA;AAHA;AASA;AACA;AACA;AA5OA;AACA;AA6OA;;;;;;;;;;;;AChPA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAIA;AAIA;AAEA;AAEA;AAEA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAFA;AAOA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAnJA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAFA;AAIA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAFA;AAMA;AACA;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAUA;AACA,eAiCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}